/**
 * Jackalope API Specification
 * This document is the API specification for the IDEXX Jackalope server.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface BinaryUpload
 */
export interface BinaryUpload {
  /**
   *
   * @type {string}
   * @memberof BinaryUpload
   */
  name?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof BinaryUpload
   */
  data?: Array<string>;
}

/**
 *
 * @export
 * @interface Cell
 */
export interface Cell {
  /**
   *
   * @type {string}
   * @memberof Cell
   */
  sediVueAssayName: string;
  /**
   *
   * @type {string}
   * @memberof Cell
   */
  ivlsAssayIdentityName?: string;
  /**
   *
   * @type {string}
   * @memberof Cell
   */
  labelText?: string;
  /**
   *
   * @type {boolean}
   * @memberof Cell
   */
  suppressed?: boolean;
  /**
   *
   * @type {Array<Coordinate>}
   * @memberof Cell
   */
  coordinates: Array<Coordinate>;
}

/**
 *
 * @export
 * @interface ConfigurationData
 */
export interface ConfigurationData {
  /**
   *
   * @type {number}
   * @memberof ConfigurationData
   */
  expiryLimitHours?: number;
  /**
   *
   * @type {number}
   * @memberof ConfigurationData
   */
  retryLimitCount?: number;
  /**
   *
   * @type {RetryStrategy}
   * @memberof ConfigurationData
   */
  retryStrategy: RetryStrategy;
  /**
   *
   * @type {number}
   * @memberof ConfigurationData
   */
  clinicId?: number;
  /**
   *
   * @type {boolean}
   * @memberof ConfigurationData
   */
  imageManagerIntegration?: boolean;
  /**
   *
   * @type {string}
   * @memberof ConfigurationData
   */
  imageManagerUrl?: string;
}

/**
 *
 * @export
 * @interface Coordinate
 */
export interface Coordinate {
  /**
   *
   * @type {number}
   * @memberof Coordinate
   */
  x?: number;
  /**
   *
   * @type {number}
   * @memberof Coordinate
   */
  y?: number;
}

/**
 *
 * @export
 * @interface DotPlotApiLegendItem
 */
export interface DotPlotApiLegendItem {
  /**
   *
   * @type {string}
   * @memberof DotPlotApiLegendItem
   */
  type: CellEvent;
  /**
   *
   * @type {string}
   * @memberof DotPlotApiLegendItem
   */
  color: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotApiLegendItem
   */
  translation: string;
}

export interface NodeDataResponse {
  uuid: string;
  index: number;
  expiryOverride?: boolean;
  dateCreated?: number;
  originalFilename?: string;
  expiryDate?: number;
  contentType?: string;
  // The asset ID of the node in Image Manager. Null if it has not been uploaded to Image Manager.
  imageManagerAssetId?: string | null;
  imageUrl: string;
  thumbnailUrl: string;
  metadataUrl?: string;
  nodeDataAttributes: { [key: string]: string };
}

/**
 *
 * @export
 * @interface DotPlotNodeDataResponse
 */
export interface DotPlotNodeDataResponse extends NodeDataResponse {
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  locale: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  scattergramType: ScattergramType;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  scattergramTypeTranslation: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  axisX: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  axisXTranslation: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  axisY: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  axisYTranslation: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  instrumentName: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  sampleType: string;
  /**
   *
   * @type {string}
   * @memberof DotPlotNodeDataResponse
   */
  sampleTypeTranslation: string;
  /**
   *
   * @type {Array<DotPlotApiLegendItem>}
   * @memberof DotPlotNodeDataResponse
   */
  legend: Array<DotPlotApiLegendItem>;
}

/**
 *
 * @export
 * @interface FileRetentionRule
 */
export interface FileRetentionRule {
  /**
   *
   * @type {number}
   * @memberof FileRetentionRule
   */
  ruleId: number;
  /**
   *
   * @type {string}
   * @memberof FileRetentionRule
   */
  directory: string;
  /**
   *
   * @type {boolean}
   * @memberof FileRetentionRule
   */
  recursive: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof FileRetentionRule
   */
  retention: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof FileRetentionRule
   */
  exclusions: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof FileRetentionRule
   */
  inclusions: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof FileRetentionRule
   */
  enabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof FileRetentionRule
   */
  permanent: boolean;
}

/**
 *
 * @export
 * @interface ImageManagerNodeGroupData
 */
export interface ImageManagerNodeGroupData {
  /**
   *
   * @type {string}
   * @memberof ImageManagerNodeGroupData
   */
  patientName: string;
  /**
   *
   * @type {string}
   * @memberof ImageManagerNodeGroupData
   */
  clientLastName: string;
  /**
   *
   * @type {string}
   * @memberof ImageManagerNodeGroupData
   */
  clientFirstName: string;
  /**
   *
   * @type {string}
   * @memberof ImageManagerNodeGroupData
   */
  instrumentSerialNumber: string;
}

/**
 *
 * @export
 * @interface InputStream
 */
export interface InputStream {}

/**
 *
 * @export
 * @interface RetryStrategy
 */
export interface RetryStrategy {
  /**
   *
   * @type {string}
   * @memberof RetryStrategy
   */
  type: RetryStrategy.TypeEnum;
  /**
   *
   * @type {string}
   * @memberof RetryStrategy
   */
  params?: string;
}

/**
 * @export
 * @namespace RetryStrategy
 */
export namespace RetryStrategy {
  /**
   * @export
   * @enum {string}
   */
  export enum TypeEnum {
    Constant = <any>"constant",
    Backoff = <any>"backoff",
  }
}

/**
 *
 * @export
 * @interface UrinalysisKeyImageSelection
 */
export interface UrinalysisKeyImageSelection {
  /**
   *
   * @type {string}
   * @memberof UrinalysisKeyImageSelection
   */
  keyImageType?: UrinalysisKeyImageSelection.KeyImageTypeEnum;
  /**
   *
   * @type {number}
   * @memberof UrinalysisKeyImageSelection
   */
  keyImageSortIndex?: number;
  /**
   *
   * @type {boolean}
   * @memberof UrinalysisKeyImageSelection
   */
  expiryOverride?: boolean;
}

/**
 * @export
 * @namespace UrinalysisKeyImageSelection
 */
export namespace UrinalysisKeyImageSelection {
  /**
   * @export
   * @enum {string}
   */
  export enum KeyImageTypeEnum {
    INSTRUMENT = <any>"INSTRUMENT",
    USER = <any>"USER",
  }
}

/**
 *
 * @export
 * @interface UrinalysisNodeDataResponse
 */
export interface UrinalysisNodeDataResponse extends NodeDataResponse {
  /**
   *
   * @type {number}
   * @memberof UrinalysisNodeDataResponse
   */
  prioritizationScore: number;
  /**
   *
   * @type {number}
   * @memberof UrinalysisNodeDataResponse
   */
  referenceId: number;
  /**
   *
   * @type {boolean}
   * @memberof UrinalysisNodeDataResponse
   */
  microscopyMode: boolean;
  /**
   *
   * @type {Array<Cell>}
   * @memberof UrinalysisNodeDataResponse
   */
  cells: Array<Cell>;
  /**
   *
   * @type {Array<string>}
   * @memberof UrinalysisNodeDataResponse
   */
  flags: Array<string>;
  /**
   *
   * @type {number}
   * @memberof UrinalysisNodeDataResponse
   */
  keyImageSortIndex?: number;
  /**
   *
   * @type {string}
   * @memberof UrinalysisNodeDataResponse
   */
  keyImageType?: UrinalysisNodeDataResponse.KeyImageTypeEnum;
  /**
   *
   * @type {number}
   * @memberof UrinalysisNodeDataResponse
   */
  focalLength?: number;
  /**
   *
   * @type {number}
   * @memberof UrinalysisNodeDataResponse
   */
  shutterSpeed?: number;
  /**
   *
   * @type {string}
   * @memberof UrinalysisNodeDataResponse
   */
  testProtocol?: string;
}

/**
 * @export
 * @namespace UrinalysisNodeDataResponse
 */
export namespace UrinalysisNodeDataResponse {
  /**
   * @export
   * @enum {string}
   */
  export enum KeyImageTypeEnum {
    INSTRUMENT = <any>"INSTRUMENT",
    USER = <any>"USER",
  }
}

export type ScattergramType = "RBC" | "WBC";

const _RedOrder = [
  "RBC",
  "RETICS",
  "PLT",
  "UPP",
  "RBC_FRAG",
  "WBC",
  "UNK",
  "DOUBLET",
  "QUALIBEADS",
] as const;

const _WhiteOrder = [
  "GRANS",
  "AGRANS",
  "NEU",
  "HETER",
  "LYM",
  "MONO",
  "EOS",
  "BASO",
  "PLT_AGG",
  "R8",
  "URBC",
  "QUALIBEADS",
  "UNK",
] as const;

export const CellEvents = [..._RedOrder, ..._WhiteOrder];
export type CellEvent = (typeof CellEvents)[number];

export const RedOrder = _RedOrder as unknown as CellEvent[];
export const WhiteOrder = _WhiteOrder as unknown as CellEvent[];
